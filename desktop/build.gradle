apply plugin: "java"
// apply plugin: "proguard"

sourceCompatibility = 1.6
targetCompatibility = 1.6
sourceSets.main.java.srcDirs = [ "src/main/java" ]

project.ext.assetsDir = new File("../android/assets");

/* task run(dependsOn: classes, type: JavaExec) {
    main = project.mainClassName
    classpath = sourceSets.main.runtimeClasspath
    standardInput = System.in
    workingDir = project.assetsDir
    ignoreExitValue = true
}*/

task dist(type: Jar) {
    from files(sourceSets.main.output.classesDir)
    from files(sourceSets.main.output.resourcesDir)
    from {configurations.compile.collect {zipTree(it)}}
    from files(project.assetsDir);
 
    manifest {
        attributes 'Main-Class': project.mainClassName
    }
}

task proguard(type: proguard.gradle.ProGuardTask,dependsOn:dist) {
    /*ext{
        jar.classifier="standalone"
        injar= jar.archivePath
        jar.classifier="proguard"
        outJar= jar.archivePath

    }*/
    injars new File("build/libs/desktop-${version}.jar")
    outjars new File("build/proguard/desktop-$version-proguard.jar")
    configuration '../android/proguard-project.txt'
    configuration 'proguard-desktop.txt'
}

task deleteOldJar(type: Delete, dependsOn:proguard) {
    outputs.upToDateWhen { false }
    delete 'launcher/libs/'
}

task copyNewJar(type: Copy, dependsOn:deleteOldJar) {
    outputs.upToDateWhen { false }
    from 'build/proguard'
    into 'launcher/libs/'
	// include 'desktop-$version-proguard.jar'
	rename ('.*', 'desktop.jar')
}

task releaseApplication(dependsOn:copyNewJar) {

}

dist.dependsOn classes
startScripts.dependsOn proguard
// bundleNative.dependsOn copyNewJar
build.dependsOn releaseApplication

eclipse {
    project {
        name = appName + "-desktop"
        linkedResource name: 'assets', type: '2', location: 'PARENT-1-PROJECT_LOC/android/assets'
    }
}

task afterEclipseImport(description: "Post processing after project generation", group: "IDE") {
  doLast {
    def classpath = new XmlParser().parse(file(".classpath"))
    new Node(classpath, "classpathentry", [ kind: 'src', path: 'assets' ]);
    def writer = new FileWriter(file(".classpath"))
    def printer = new XmlNodePrinter(new PrintWriter(writer))
    printer.setPreserveWhitespace(true)
    printer.print(classpath)
  }
}