task copyNatives << {
    file("xcode/native/ios/").mkdirs();
    def LD_FLAGS = "LIBGDX_NATIVES = "
    configurations.natives.files.each { jar->
        def outputDir = null
        if (jar.name.endsWith("natives-ios.jar")) outputDir = file("xcode/native/ios")
        if (outputDir != null) {
            FileCollection fileCollection = zipTree(jar)
            for (File libFile : fileCollection) {
                if (libFile.getAbsolutePath().endsWith(".a") && !libFile.getAbsolutePath().contains("/tvos/")) {
                    copy {
                        from libFile.getAbsolutePath()
                        into outputDir
                    }
                    LD_FLAGS += " -force_load \${SRCROOT}/native/ios/" + libFile.getName()
                }
            }
        }
    }
    def outFlags = file("xcode/ios-moe/custom.xcconfig");
    outFlags.write LD_FLAGS

    def proguard = file("proguard.append.cfg")
    if (proguard.exists()) {
        if (!proguard.text.contains("-keep class com.badlogic.**")) {
            proguard << "\n-keep class com.badlogic.** { *; }\n"
            proguard << "-keep enum com.badlogic.** { *; }\n"
        }
    } else {
        proguard = new File("proguard.append.cfg")
        proguard << "\n-keep class com.badlogic.** { *; }\n"
        proguard << "-keep enum com.badlogic.** { *; }\n"
        proguard << "-keep class java.** { *; }\n"
        proguard << "-keepclasseswithmembernames class * { native <methods> ; }\n"
        proguard << "-keepclassmembers enum * { \n"
        proguard << "    public static **[] values();\n"
        proguard << "    public static ** valueOf(java.lang.String);\n"
        proguard << "}\n"

        proguard << "#For something in json\n"
        proguard << "-keep class com.badlogic.gdx.graphics.g2d.BitmapFont { *;}\n"
        proguard << "-keep class com.badlogic.gdx.scenes.scene2d.ui.Skin\$TintedDrawable { *;}\n"
        proguard << "-keep class com.badlogic.gdx.graphics.Color { *;}\n"
        proguard << "-keep class **Style { *;}\n"
        proguard << "-keep class com.kotcrab.vis.ui.Sizes { *;}\n"
    }
}

task createBuildDir {
    def file = new File('build/xcode/ios-moe.xcodeproj')
    if (!file.exists()) {
        file.mkdirs();
    }
}

sourceSets.main.java.srcDirs = [ "src/" ]


moe {
    // mainClassName 'IOSMoeLauncher'
    xcode {
        mainTarget 'ios-moe'
        packageName 'com.entermoor.polyfiter'
        deploymentTarget = '9.0'
        xcodeProjectDirPath 'xcode'
        generateProject false
    }
}

moeMainReleaseIphoneosXcodeBuild.dependsOn copyNatives
moeMainDebugIphoneosXcodeBuild.dependsOn copyNatives
moeMainReleaseIphonesimulatorXcodeBuild.dependsOn copyNatives
moeMainDebugIphonesimulatorXcodeBuild.dependsOn copyNatives
